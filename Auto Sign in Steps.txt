Database Steps

tried using sqlLite.dll for database could not get it to load

SQL Server Express LocalDB
If you do want a ‚Äúreal‚Äù relational store but don‚Äôt want to wrestle with SQLite, LocalDB comes bundled with Visual Studio or can be installed standalone.

Pros
Full T-SQL engine

Native ADO.NET support via System.Data.SqlClient (no interop DLL dance)

Familiar SQL Server tools

Steps
Install LocalDB

If you have Visual Studio, you already have (localdb)\MSSQLLocalDB.

Otherwise download ‚ÄúSQL Server Express LocalDB‚Äù from Microsoft.

Open a Developer Command Prompt for VS 2022 Preview (Start ‚Üí type ‚ÄúDeveloper Command Prompt‚Äù).
Run- "sqllocaldb info"
Should see at least You should see at least one instance, typically MSSQLLocalDB.
If you get ‚Äúcommand not found,‚Äù install the SQL Server Express LocalDB workload via Visual Studio Installer:

3. In powershell run the following to create the local t-sql database

# 1) Ensure the target folder exists
$folder = "$env:USERPROFILE\LocalDBFiles"
if (-not (Test-Path $folder)) {
    New-Item -Path $folder -ItemType Directory | Out-Null
    Write-Host "Created folder: $folder"
} else {
    Write-Host "Folder already exists: $folder"
}

# 2) Build the corrected T-SQL
$sql = @"
CREATE DATABASE [RoomsDb]
  ON (
      NAME = N'RoomsDb', 
      FILENAME = N'$folder\RoomsDb.mdf'
  )
  LOG ON (
      NAME = N'RoomsDb_log',
      FILENAME = N'$folder\RoomsDb_log.ldf'
  );
"@

# 3) Invoke sqlcmd from PowerShell
sqlcmd -S '(localdb)\MSSQLLocalDB' -Q $sql

# 4) Verify files were created
Get-ChildItem "$folder\RoomsDb.mdf","$folder\RoomsDb_log.ldf"

4. Populating database and giving structure 
Open powershell and save the following next to your CSV file once you have created a local database csv file
# ---------------------------------------------------------
# Refresh-RoomsInline.ps1 ‚Äî no external .sql file needed
# ---------------------------------------------------------

# 1) Locate CSV
$csvPath = Join-Path $PSScriptRoot 'RoomsToSeed.csv'
if (-not (Test-Path $csvPath)) {
    Write-Error "Could not find $csvPath"
    exit 1
}

# 2) Truncate the table
Write-Host "üóë Truncating dbo.Rooms..."
sqlcmd -S '(localdb)\MSSQLLocalDB' -d RoomsDb -Q "TRUNCATE TABLE dbo.Rooms;"

# 3) Import CSV and INSERT row by row
Write-Host "‚úèÔ∏è Inserting rows from CSV..."
Import-Csv $csvPath | ForEach-Object {
    # Escape any single-quotes
    $rn = $_.RoomName  -replace("'","''")
    $em = $_.Email     -replace("'","''")
    $pw = $_.Password  -replace("'","''")

    $insertQ = "
INSERT INTO dbo.Rooms (RoomName,Email,Password)
VALUES (N'$rn', N'$em', N'$pw');
"
    sqlcmd -S '(localdb)\MSSQLLocalDB' -d RoomsDb -Q $insertQ | Out-Null
    Write-Host "  ‚Ä¢ Inserted '$($_.RoomName)'"
}

# 4) Verify contents
Write-Host "`nüîç Final contents of dbo.Rooms:"
sqlcmd -S '(localdb)\MSSQLLocalDB' -d RoomsDb -Q "SET NOCOUNT ON; SELECT RoomName, Email, Password FROM dbo.Rooms ORDER BY RoomName;"

Run the script once saved as

5. Open powershell and populate database

in powersehll run - cd C:\Users\current.user\LocalDBFiles
.\Refresh-RoomsInline.ps1

uses inline script to populate csv into local database

6. copy and save this in powershell ise
# ---------------------------------------
# TeamsLogin-WithLocalDB.ps1
# ---------------------------------------

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
Add-Type -AssemblyName System.Data

# ‚Äî CONFIG: point to your LocalDB .mdf file ‚Äî
$mdfPath = "$env:USERPROFILE\LocalDBFiles\RoomsDb.mdf"
if (-not (Test-Path $mdfPath)) {
    [System.Windows.Forms.MessageBox]::Show(
      "LocalDB file not found at:`n$mdfPath`nRun your init script first.",
      "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error
    )
    exit
}
$connString = "Server=(localdb)\MSSQLLocalDB;Integrated Security=true;AttachDbFileName=$mdfPath;"

# ‚Äî DATA-ACCESS HELPERS ‚Äî
function Get-AllRooms {
    $rooms = [System.Collections.Generic.List[string]]::new()
    $cn = [System.Data.SqlClient.SqlConnection]::new($connString)
    try {
        $cn.Open()
        $cmd = $cn.CreateCommand()
        $cmd.CommandText = "SELECT RoomName FROM dbo.Rooms ORDER BY RoomName;"
        $reader = $cmd.ExecuteReader()
        while ($reader.Read()) { $rooms.Add($reader.GetString(0)) }
    }
    finally { $cn.Close() }
    return $rooms
}
function Get-CredsByRoom($room) {
    $obj = $null
    $cn = [System.Data.SqlClient.SqlConnection]::new($connString)
    try {
        $cn.Open()
        $cmd = $cn.CreateCommand()
        $cmd.CommandText = "SELECT Email,Password FROM dbo.Rooms WHERE RoomName=@r;"
        $param = $cmd.Parameters.Add("@r",[System.Data.SqlDbType]::NVarChar,100)
        $param.Value = $room
        $reader = $cmd.ExecuteReader()
        if ($reader.Read()) {
            $obj = [PSCustomObject]@{
                Email    = $reader.GetString(0)
                Password = $reader.GetString(1)
            }
        }
    }
    finally { $cn.Close() }
    return $obj
}

# ‚Äî BUILD THE FORM ‚Äî
$form = New-Object System.Windows.Forms.Form
$form.Text            = "Teams Login"
$form.Size            = New-Object System.Drawing.Size(480,420)
$form.StartPosition   = "CenterScreen"
$form.FormBorderStyle = "FixedDialog"
$form.MaximizeBox     = $false

# ‚Äî Room ListBox ‚Äî
$lblRoom = New-Object System.Windows.Forms.Label
$lblRoom.Text     = "Select Room:"
$lblRoom.Font     = New-Object System.Drawing.Font("Segoe UI",9,[System.Drawing.FontStyle]::Regular)
$lblRoom.AutoSize = $true
$lblRoom.Location = New-Object System.Drawing.Point(20,20)
$form.Controls.Add($lblRoom)

$roomList = New-Object System.Windows.Forms.ListBox
$roomList.Location   = New-Object System.Drawing.Point(20,45)
$roomList.Size       = New-Object System.Drawing.Size(150,250)
$form.Controls.Add($roomList)

# ‚Äî Main Header ‚Äî
$mainHeader = New-Object System.Windows.Forms.Label
$mainHeader.Text     = "Enter Teams Room Credentials"
$mainHeader.Font     = New-Object System.Drawing.Font("Segoe UI",12,[System.Drawing.FontStyle]::Bold)
$mainHeader.AutoSize = $true
$mainHeader.Location = New-Object System.Drawing.Point(200,20)
$form.Controls.Add($mainHeader)

# ‚Äî Email ‚Äî
$emailLabel = New-Object System.Windows.Forms.Label
$emailLabel.Text     = "Email:"
$emailLabel.Location = New-Object System.Drawing.Point(200,65)
$emailLabel.AutoSize = $true
$form.Controls.Add($emailLabel)

$emailBox = New-Object System.Windows.Forms.TextBox
$emailBox.Location   = New-Object System.Drawing.Point(270,60)
$emailBox.Size       = New-Object System.Drawing.Size(180,22)
$emailBox.MaxLength  = 60
$form.Controls.Add($emailBox)

# ‚Äî Password ‚Äî
$passLabel = New-Object System.Windows.Forms.Label
$passLabel.Text     = "Password:"
$passLabel.Location = New-Object System.Drawing.Point(200,100)
$passLabel.AutoSize = $true
$form.Controls.Add($passLabel)

$passBox = New-Object System.Windows.Forms.TextBox
$passBox.Location           = New-Object System.Drawing.Point(270,95)
$passBox.Size               = New-Object System.Drawing.Size(160,22)
$passBox.UseSystemPasswordChar = $true
$passBox.MaxLength         = 40
$form.Controls.Add($passBox)

# ‚Äî Eye Toggle ‚Äî
$toggleButton = New-Object System.Windows.Forms.Button
$toggleButton.Location = New-Object System.Drawing.Point(435,93)
$toggleButton.Size     = New-Object System.Drawing.Size(25,23)
$toggleButton.Text     = "üëÅ"
$toggleButton.Add_Click({
    $passBox.UseSystemPasswordChar = -not $passBox.UseSystemPasswordChar
})
$form.Controls.Add($toggleButton)

# ‚Äî Secondary Header ‚Äî
$codeHeader = New-Object System.Windows.Forms.Label
$codeHeader.Text     = "Enter Teams Sign in Codes"
$codeHeader.Font     = New-Object System.Drawing.Font("Segoe UI",10,[System.Drawing.FontStyle]::Regular)
$codeHeader.AutoSize = $true
$codeHeader.Location = New-Object System.Drawing.Point(200,140)
$form.Controls.Add($codeHeader)

# ‚Äî Tablet Code ‚Äî
$tabLabel = New-Object System.Windows.Forms.Label
$tabLabel.Text     = "Tablet Code:"
$tabLabel.Location = New-Object System.Drawing.Point(180,170)
$tabLabel.AutoSize = $true
$form.Controls.Add($tabLabel)

$tabBox = New-Object System.Windows.Forms.TextBox
$tabBox.Location = New-Object System.Drawing.Point(270,165)
$tabBox.Size     = New-Object System.Drawing.Size(180,22)
$form.Controls.Add($tabBox)

# ‚Äî Bar Code ‚Äî
$barLabel = New-Object System.Windows.Forms.Label
$barLabel.Text     = "Bar Code:"
$barLabel.Location = New-Object System.Drawing.Point(180,205)
$barLabel.AutoSize = $true
$form.Controls.Add($barLabel)

$barBox = New-Object System.Windows.Forms.TextBox
$barBox.Location = New-Object System.Drawing.Point(270,200)
$barBox.Size     = New-Object System.Drawing.Size(180,22)
$form.Controls.Add($barBox)

# ‚Äî Save & Exit Buttons ‚Äî
$saveButton = New-Object System.Windows.Forms.Button
$saveButton.Text     = "Save"
$saveButton.Size     = New-Object System.Drawing.Size(75,30)
$saveButton.Location = New-Object System.Drawing.Point(270,260)
$form.Controls.Add($saveButton)

$exitButton = New-Object System.Windows.Forms.Button
$exitButton.Text     = "Exit"
$exitButton.Size     = New-Object System.Drawing.Size(75,30)
$exitButton.Location = New-Object System.Drawing.Point(355,260)
$exitButton.Add_Click({ $form.Close() })
$form.Controls.Add($exitButton)

# ‚Äî EVENT WIRING ‚Äî #

# Populate rooms when the form is shown
$form.Add_Shown({
    $roomList.Items.Clear()
    Get-AllRooms | ForEach-Object { $roomList.Items.Add($_) | Out-Null }
})

# Helper to pull creds and update the text boxes
function Update-Credentials {
    param($sender, $e)
    $sel = $roomList.SelectedItem
    if ($sel) {
        $creds = Get-CredsByRoom $sel
        if ($creds) {
            $emailBox.Text = $creds.Email
            $passBox.Text  = $creds.Password
        }
    }
}

# Wire both events so every selection change fires updater
$roomList.Add_SelectedIndexChanged({ Update-Credentials @args })
$roomList.Add_SelectedValueChanged({ Update-Credentials @args })

# ‚Äî Original Save logic continues unchanged ‚Äî #
$saveButton.Add_Click({
    # 1) Gather inputs
    $email    = $emailBox.Text.Trim()
    $password = $passBox.Text
    $tablet   = $tabBox.Text.Trim()
    $barcode  = $barBox.Text.Trim()

    # 2) Validation
    if (-not ($email -match "@cgi\.com$")) {
        [System.Windows.Forms.MessageBox]::Show("Email must end with '@cgi.com'")
        return
    }
    if ($tablet.Length -lt 9) {
        [System.Windows.Forms.MessageBox]::Show("Tablet Code must be at least 9 characters")
        return
    }
    if ($barcode.Length -lt 9) {
        [System.Windows.Forms.MessageBox]::Show("Bar Code must be at least 9 characters")
        return
    }

    # 3) Store locals
    $global:Email      = $email
    $global:passW      = $password
    $global:tabletCode = $tablet
    $global:barCode    = $barcode

     # 4) Determine URL & Edge executable
    $url = "https://login.microsoftonline.com/common/oauth2/deviceauth"
    $edgeExe = "$Env:ProgramFiles (x86)\Microsoft\Edge\Application\msedge.exe"
    if (-not (Test-Path $edgeExe)) {
        $edgeExe = "$Env:ProgramFiles\Microsoft\Edge\Application\msedge.exe"
    }
    if (-not (Test-Path $edgeExe)) {
        [System.Windows.Forms.MessageBox]::Show("Microsoft Edge not found.")
        return
    }

    # ‚îÄ‚îÄ‚îÄ First InPrivate Flow ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    $launchTime = Get-Date
    Start-Process -FilePath $edgeExe -ArgumentList "--inprivate","--new-window",$url
    Start-Sleep -Seconds 5

    # Paste Tablet Code ‚Üí Next
    [System.Windows.Forms.Clipboard]::SetText($tablet)
    [System.Windows.Forms.SendKeys]::SendWait("^{v}")
    Start-Sleep -Seconds 2
    [System.Windows.Forms.SendKeys]::SendWait("{TAB}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")

    # Email ‚Üí Next
    Start-Sleep -Seconds 4
    [System.Windows.Forms.Clipboard]::SetText($email)
    [System.Windows.Forms.SendKeys]::SendWait("^{v}")
    Start-Sleep -Milliseconds 500
    1..4 | ForEach-Object {
        [System.Windows.Forms.SendKeys]::SendWait("{TAB}")
        Start-Sleep -Milliseconds 200
    }
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")

    # Sign in as current user
    Start-Sleep -Seconds 7
    [System.Windows.Forms.SendKeys]::SendWait("{TAB}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")

    # Email + Password ‚Üí Final
    Start-Sleep -Seconds 6
    [System.Windows.Forms.Clipboard]::SetText($email)
    [System.Windows.Forms.SendKeys]::SendWait("^{v}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{TAB}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.Clipboard]::SetText($password)
    [System.Windows.Forms.SendKeys]::SendWait("^{v}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{TAB}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")
    Start-Sleep -Seconds 4
    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")
    Start-Sleep -Seconds 4

    # ‚îÄ‚îÄ‚îÄ Kill all edge windows ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    Stop-Process -Name msedge -Force -ErrorAction SilentlyContinue

    # 5) Wait 5 seconds, then Second InPrivate Flow
    Start-Sleep -Seconds 15
    Start-Process -FilePath $edgeExe -ArgumentList "--inprivate","--new-window",$url
    Start-Sleep -Seconds 5

    # Paste Bar Code ‚Üí Next
    [System.Windows.Forms.Clipboard]::SetText($barcode)
    [System.Windows.Forms.SendKeys]::SendWait("^{v}")
    Start-Sleep -Seconds 2
    [System.Windows.Forms.SendKeys]::SendWait("{TAB}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")

    # ‚îÄ‚îÄ‚îÄ Inserted Email/Password Flow after Bar Code ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    Start-Sleep -Seconds 4
    [System.Windows.Forms.Clipboard]::SetText($email)
    [System.Windows.Forms.SendKeys]::SendWait("^{v}")
    Start-Sleep -Milliseconds 500
    1..4 | ForEach-Object {
        [System.Windows.Forms.SendKeys]::SendWait("{TAB}")
        Start-Sleep -Milliseconds 200
    }
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")

    Start-Sleep -Seconds 7
    [System.Windows.Forms.SendKeys]::SendWait("{TAB}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")

    Start-Sleep -Seconds 6
    [System.Windows.Forms.Clipboard]::SetText($email)
    [System.Windows.Forms.SendKeys]::SendWait("^{v}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{TAB}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.Clipboard]::SetText($password)
    [System.Windows.Forms.SendKeys]::SendWait("^{v}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{TAB}")
    Start-Sleep -Milliseconds 300
    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")
    Start-Sleep -Seconds 4
    [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")

    # 6) Finally, close the form
    $form.Close()
})

# ‚Äî LAUNCH the form ‚Äî #
$form.ShowDialog()

7. this script opens a GUI with a listbox containing all MicrosftTeams Rooms managed by me
I select which room i want to sign in on the list and the corresponding email and password for the room are auto populated.
I then input the tablet and bar Teams codes and hit the save button
At this point the custom SSO process starts by using browser logic simulation 
